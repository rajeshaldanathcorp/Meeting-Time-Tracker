name: Azure Web App Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  AZURE_WEBAPP_NAME: meetingtracker

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install --force
        npm ls || echo "Warning: Issues with dependency resolution."

    - name: Create .env.local
      run: |
        cat << EOF > .env.local
        PORT=8080
        AZURE_AD_CLIENT_ID=${{ secrets.AZURE_AD_CLIENT_ID }}
        AZURE_AD_CLIENT_SECRET=${{ secrets.AZURE_AD_CLIENT_SECRET }}
        AZURE_AD_TENANT_ID=${{ secrets.AZURE_AD_TENANT_ID }}
        AZURE_AD_APP_CLIENT_ID=${{ secrets.AZURE_AD_CLIENT_ID }}
        AZURE_AD_APP_CLIENT_SECRET=${{ secrets.AZURE_AD_CLIENT_SECRET }}
        AZURE_AD_APP_TENANT_ID=${{ secrets.AZURE_AD_TENANT_ID }}
        NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
        AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_DEPLOYMENT=${{ secrets.AZURE_OPENAI_DEPLOYMENT }}
        EOF

    - name: Build Next.js app
      run: npm run build

    - name: Prepare for production
      run: |
        mkdir -p prod
        cp -r .next prod/
        cp -r public prod/
        cp -r node_modules prod/
        cp package.json prod/
        cp package-lock.json prod/
        cp .env.local prod/
        cp next.config.ts prod/
        # Create a server.js file for Azure
        cat << EOF > prod/server.js
        const { createServer } = require('http');
        const { parse } = require('url');
        const next = require('next');
        
        const dev = false;
        const hostname = 'localhost';
        const port = process.env.PORT || 8080;
        
        const app = next({ dev, hostname, port });
        const handle = app.getRequestHandler();
        
        app.prepare().then(() => {
          createServer(async (req, res) => {
            try {
              const parsedUrl = parse(req.url, true);
              await handle(req, res, parsedUrl);
            } catch (err) {
              console.error('Error occurred handling', req.url, err);
              res.statusCode = 500;
              res.end('internal server error');
            }
          })
          .once('error', (err) => {
            console.error(err);
            process.exit(1);
          })
          .listen(port, () => {
            console.log(`> Ready on http://${hostname}:${port}`);
          });
        });
        EOF
        chmod +x prod/server.js

    - name: Package application
      run: |
        cd prod
        zip -r ../app.zip .

    - name: Upload artifact for deployment
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: app.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: node-app
        path: app

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: app/app.zip 
        